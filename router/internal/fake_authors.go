// Code generated by counterfeiter. DO NOT EDIT.
package internal

import (
	"sync"

	"github.com/BooleanCat/alexandrium/store"
	"github.com/BooleanCat/alexandrium/types"
)

type FakeAuthors struct {
	ByIDStub        func(string) (types.Author, error)
	byIDMutex       sync.RWMutex
	byIDArgsForCall []struct {
		arg1 string
	}
	byIDReturns struct {
		result1 types.Author
		result2 error
	}
	byIDReturnsOnCall map[int]struct {
		result1 types.Author
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthors) ByID(arg1 string) (types.Author, error) {
	fake.byIDMutex.Lock()
	ret, specificReturn := fake.byIDReturnsOnCall[len(fake.byIDArgsForCall)]
	fake.byIDArgsForCall = append(fake.byIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ByID", []interface{}{arg1})
	fake.byIDMutex.Unlock()
	if fake.ByIDStub != nil {
		return fake.ByIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.byIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthors) ByIDCallCount() int {
	fake.byIDMutex.RLock()
	defer fake.byIDMutex.RUnlock()
	return len(fake.byIDArgsForCall)
}

func (fake *FakeAuthors) ByIDCalls(stub func(string) (types.Author, error)) {
	fake.byIDMutex.Lock()
	defer fake.byIDMutex.Unlock()
	fake.ByIDStub = stub
}

func (fake *FakeAuthors) ByIDArgsForCall(i int) string {
	fake.byIDMutex.RLock()
	defer fake.byIDMutex.RUnlock()
	argsForCall := fake.byIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthors) ByIDReturns(result1 types.Author, result2 error) {
	fake.byIDMutex.Lock()
	defer fake.byIDMutex.Unlock()
	fake.ByIDStub = nil
	fake.byIDReturns = struct {
		result1 types.Author
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthors) ByIDReturnsOnCall(i int, result1 types.Author, result2 error) {
	fake.byIDMutex.Lock()
	defer fake.byIDMutex.Unlock()
	fake.ByIDStub = nil
	if fake.byIDReturnsOnCall == nil {
		fake.byIDReturnsOnCall = make(map[int]struct {
			result1 types.Author
			result2 error
		})
	}
	fake.byIDReturnsOnCall[i] = struct {
		result1 types.Author
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthors) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.byIDMutex.RLock()
	defer fake.byIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthors) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.Authors = new(FakeAuthors)
